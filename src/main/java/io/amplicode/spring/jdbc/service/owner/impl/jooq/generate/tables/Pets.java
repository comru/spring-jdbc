/*
 * This file is generated by jOOQ.
 */
package io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.tables;


import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.Indexes;
import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.Keys;
import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.Public;
import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.tables.Owners.OwnersPath;
import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.tables.Types.TypesPath;
import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.tables.records.PetsRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Pets extends TableImpl<PetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pets</code>
     */
    public static final Pets PETS = new Pets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PetsRecord> getRecordType() {
        return PetsRecord.class;
    }

    /**
     * The column <code>public.pets.id</code>.
     */
    public final TableField<PetsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pets.name</code>.
     */
    public final TableField<PetsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.pets.birth_date</code>.
     */
    public final TableField<PetsRecord, LocalDate> BIRTH_DATE = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.pets.type_id</code>.
     */
    public final TableField<PetsRecord, Integer> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pets.owner_id</code>.
     */
    public final TableField<PetsRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER, this, "");

    private Pets(Name alias, Table<PetsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Pets(Name alias, Table<PetsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.pets</code> table reference
     */
    public Pets(String alias) {
        this(DSL.name(alias), PETS);
    }

    /**
     * Create an aliased <code>public.pets</code> table reference
     */
    public Pets(Name alias) {
        this(alias, PETS);
    }

    /**
     * Create a <code>public.pets</code> table reference
     */
    public Pets() {
        this(DSL.name("pets"), null);
    }

    public <O extends Record> Pets(Table<O> path, ForeignKey<O, PetsRecord> childPath, InverseForeignKey<O, PetsRecord> parentPath) {
        super(path, childPath, parentPath, PETS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PetsPath extends Pets implements Path<PetsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PetsPath(Table<O> path, ForeignKey<O, PetsRecord> childPath, InverseForeignKey<O, PetsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PetsPath(Name alias, Table<PetsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PetsPath as(String alias) {
            return new PetsPath(DSL.name(alias), this);
        }

        @Override
        public PetsPath as(Name alias) {
            return new PetsPath(alias, this);
        }

        @Override
        public PetsPath as(Table<?> alias) {
            return new PetsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PETS_NAME_IDX, Indexes.PETS_OWNER_ID_IDX);
    }

    @Override
    public Identity<PetsRecord, Integer> getIdentity() {
        return (Identity<PetsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PetsRecord> getPrimaryKey() {
        return Keys.PETS_PKEY;
    }

    @Override
    public List<ForeignKey<PetsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PETS__PETS_TYPE_ID_FKEY, Keys.PETS__PETS_OWNER_ID_FKEY);
    }

    private transient TypesPath _types_;

    /**
     * Get the implicit join path to the <code>public.types</code> table.
     */
    public TypesPath types_() {
        if (_types_ == null)
            _types_ = new TypesPath(this, Keys.PETS__PETS_TYPE_ID_FKEY, null);

        return _types_;
    }

    private transient OwnersPath _owners;

    /**
     * Get the implicit join path to the <code>public.owners</code> table.
     */
    public OwnersPath owners() {
        if (_owners == null)
            _owners = new OwnersPath(this, Keys.PETS__PETS_OWNER_ID_FKEY, null);

        return _owners;
    }

    @Override
    public Pets as(String alias) {
        return new Pets(DSL.name(alias), this);
    }

    @Override
    public Pets as(Name alias) {
        return new Pets(alias, this);
    }

    @Override
    public Pets as(Table<?> alias) {
        return new Pets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pets rename(String name) {
        return new Pets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pets rename(Name name) {
        return new Pets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pets rename(Table<?> name) {
        return new Pets(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pets where(Condition condition) {
        return new Pets(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pets where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pets where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pets where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pets where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pets where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pets where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pets where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pets whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pets whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
