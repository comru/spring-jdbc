/*
 * This file is generated by jOOQ.
 */
package io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.tables;


import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.Indexes;
import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.Keys;
import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.Public;
import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.tables.Pets.PetsPath;
import io.amplicode.spring.jdbc.service.owner.impl.jooq.generate.tables.records.TypesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Types extends TableImpl<TypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.types</code>
     */
    public static final Types TYPES = new Types();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypesRecord> getRecordType() {
        return TypesRecord.class;
    }

    /**
     * The column <code>public.types.id</code>.
     */
    public final TableField<TypesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.types.name</code>.
     */
    public final TableField<TypesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private Types(Name alias, Table<TypesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Types(Name alias, Table<TypesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.types</code> table reference
     */
    public Types(String alias) {
        this(DSL.name(alias), TYPES);
    }

    /**
     * Create an aliased <code>public.types</code> table reference
     */
    public Types(Name alias) {
        this(alias, TYPES);
    }

    /**
     * Create a <code>public.types</code> table reference
     */
    public Types() {
        this(DSL.name("types"), null);
    }

    public <O extends Record> Types(Table<O> path, ForeignKey<O, TypesRecord> childPath, InverseForeignKey<O, TypesRecord> parentPath) {
        super(path, childPath, parentPath, TYPES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TypesPath extends Types implements Path<TypesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TypesPath(Table<O> path, ForeignKey<O, TypesRecord> childPath, InverseForeignKey<O, TypesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TypesPath(Name alias, Table<TypesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TypesPath as(String alias) {
            return new TypesPath(DSL.name(alias), this);
        }

        @Override
        public TypesPath as(Name alias) {
            return new TypesPath(alias, this);
        }

        @Override
        public TypesPath as(Table<?> alias) {
            return new TypesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TYPES_NAME_IDX);
    }

    @Override
    public Identity<TypesRecord, Integer> getIdentity() {
        return (Identity<TypesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TypesRecord> getPrimaryKey() {
        return Keys.TYPES_PKEY;
    }

    private transient PetsPath _pets;

    /**
     * Get the implicit to-many join path to the <code>public.pets</code> table
     */
    public PetsPath pets() {
        if (_pets == null)
            _pets = new PetsPath(this, null, Keys.PETS__PETS_TYPE_ID_FKEY.getInverseKey());

        return _pets;
    }

    @Override
    public Types as(String alias) {
        return new Types(DSL.name(alias), this);
    }

    @Override
    public Types as(Name alias) {
        return new Types(alias, this);
    }

    @Override
    public Types as(Table<?> alias) {
        return new Types(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Types rename(String name) {
        return new Types(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Types rename(Name name) {
        return new Types(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Types rename(Table<?> name) {
        return new Types(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Types where(Condition condition) {
        return new Types(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Types where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Types where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Types where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Types where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Types where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Types where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Types where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Types whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Types whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
